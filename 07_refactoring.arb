
## Refactoring

ruby_is_eloquent = true
ruby_is_ugly = false
puts "Ruby is eloquent!" if ruby_is_eloquent
puts "Ruby's not ugly!" unless ruby_is_ugly


puts "It's true!" if true
puts "It's false!" unless false


puts true ? "Es true" : "Es false" 


puts "Hello there!"
greeting = gets.chomp
# Add your case statement below!
case greeting
  when "English" then puts "Hello!"
  when "French" then puts "Bonjour!"
  when "German" then puts "Guten Tag!"
  when "Finnish" then puts "Haloo!"
  else puts "I donâ€™t know that language!"
end


favorite_book = nil
puts favorite_book
favorite_book ||= "Cat's Cradle"
puts favorite_book
favorite_book ||= "Why's (Poignant) Guide to Ruby"
puts favorite_book
favorite_book = "Why's (Poignant) Guide to Ruby"
puts favorite_book


def multiple_of_three(n)
  n % 3 == 0 ? "True" : "False" # implicit return
end


def a
  puts "A was evaluated!"
  return true
end

def b
  puts "B was also evaluated!"
  return true
end
puts a || b
puts "------"
puts a && b

5.times { puts "Odelay!" }
[1, 2, 3].each { |x| puts x * 10 }
my_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
my_array.each { |value| puts value if value % 2 == 0 }


95.upto(100) { |num| print num, " " }
"L".upto("P") { |letter| puts letter }


age = 26
age.respond_to?(:next)


alphabet = ["a", "b", "c"]
alphabet.push("d") # Update me!
caption = "A giraffe surrounded by "
caption += "weezards!" # Me, too!


alphabet = ["a", "b", "c"]
alphabet << "d" 
caption = "A giraffe surrounded by "
caption << "weezards!" 


favorite_things = ["Ruby", "espresso", "candy"]
puts "A few of my favorite things:"
favorite_things.each do |thing|
  puts "I love #{thing}!"
end


puts "One is less than two!" if 1 < 2


puts  1 < 2 ? "One is less than two!" : "One is not less than two."


favorite_animal ||= "Leon"


def square(number)
  number**2
end


for i in (1..3)
  puts "I'm a refactoring master!"
end
3.times { puts "I'm a refactoring master!" }


require 'prime'   # This is a module. We'll cover these soon!
def first_n_primes(n)
  return "n must be an integer." unless n.is_a? Integer
  return "n must be greater than 0." unless n > 0
  Prime.first n
end
first_n_primes(10)


fibs = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
doubled_fibs = fibs.collect { |x| x * 2 }
puts doubled_fibs


def yield_name(name)
  puts "In the method! Let's yield."
  yield("Kim")
  puts "In between the yields!"
  yield(name)
  puts "Block complete! Back in the method."
end
yield_name("Eric") { |n| puts "My name is #{n}." }
# Now call the method with your name!
yield_name("Josue") { |n| puts "My name is #{n}." }


def double(n)
  yield(n)
end
double(8) {|n| n*2 }


multiples_of_3 = Proc.new do |n|
  n % 3 == 0
end
print (1..100).to_a.select(&multiples_of_3)


cube = Proc.new { |x| x ** 3 }
[1, 2, 3].collect!(&cube)
[4, 5, 6].map!(&cube)


floats = [1.2, 3.45, 0.91, 7.727, 11.42, 482.911]
round_down = Proc.new { |n| n.floor }
ints = floats.collect(&round_down)
print ints


group_1 = [4.1, 5.5, 3.2, 3.3, 6.1, 3.9, 4.7]
group_2 = [7.0, 3.8, 6.2, 6.1, 4.4, 4.9, 3.0]
group_3 = [5.5, 5.1, 3.9, 4.3, 4.9, 3.2, 3.2]
over_4_feet = Proc.new { |height| height >= 4 }
can_ride_1 = group_1.select(&over_4_feet)
can_ride_2 = group_2.select(&over_4_feet)
can_ride_3 = group_3.select(&over_4_feet)
puts can_ride_1
puts can_ride_2
puts can_ride_3


def greeter 
  yield
end
phrase = Proc.new { puts "Hello there!" }
greeter(&phrase)


hi = Proc.new { puts "Hello!" }
hi.call


numbers_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
strings_array = numbers_array.map(&:to_s)
puts strings_array


def lambda_demo(a_lambda)
  puts "I'm the method!"
  a_lambda.call
end
lambda_demo(lambda { puts "I'm the lambda!" })


strings = ["leonardo", "donatello", "raphael", "michaelangelo"]
symbolize = lambda { |param| param.to_sym }
symbols = strings.collect(&symbolize)
print symbols


def batman_ironman_proc
  victor = Proc.new { return "Batman will win!" }
  victor.call
  "Iron Man will win!"
end
puts batman_ironman_proc

def batman_ironman_lambda
  victor = lambda { return "Batman will win!" }
  victor.call
  "Iron Man will win!"
end
puts batman_ironman_lambda


my_array = ["raindrops", :kettles, "whiskers", :mittens, :packages]
symbol_filter = lambda { |param| param.is_a? Symbol }
symbols = my_array.select(&symbol_filter)
puts symbols


odds_n_ends = [:weezard, 42, "Trady Blix", 3, true, 19, 12.345]
ints = odds_n_ends.select {|param| param.is_a? Integer}
puts ints


ages = [23, 101, 7, 104, 11, 94, 100, 121, 101, 70, 44]
under_100 = Proc.new { |n| n < 100 }
youngsters = ages.select(&under_100)
puts youngsters


crew = {
  captain: "Picard",
  first_officer: "Riker",
  lt_cdr: "Data",
  lt: "Worf",
  ensign: "Ro",
  counselor: "Troi",
  chief_engineer: "LaForge",
  doctor: "Crusher"
}
first_half = lambda { |key, value| value < "M" }
a_to_m = crew.select(&first_half)
puts a_to_m